{"version":3,"sources":["../../../src/utils/transform.js"],"names":["DEFAULT_ORIGIN","resolveCoordinateTransform","frame","streamMetadata","getTransformMatrix","origin","transforms","vehicleRelativeTransform","coordinate","transform","pose","coordinateSystem","COORDINATE_SYSTEM","METER_OFFSETS","modelMatrix","streamTransform","COORDINATE","GEOGRAPHIC","LNGLAT","DYNAMIC","VEHICLE_RELATIVE","IDENTITY","Pose","getTransformationMatrix","Matrix4","multiplyRight","coordinateOrigin","positionToLngLat","x","y","z","transformVector"],"mappings":";;;;;;;;AAoBA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA;AACA,IAAMA,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;;AAEO,SAASC,0BAAT,CAAoCC,KAApC,EAAoF;AAAA,MAAzCC,cAAyC,uEAAxB,EAAwB;AAAA,MAApBC,kBAAoB;AAAA,MAClFC,MADkF,GAC7BH,KAD6B,CAClFG,MADkF;AAAA,0BAC7BH,KAD6B,CAC1EI,UAD0E;AAAA,MAC1EA,UAD0E,kCAC7D,EAD6D;AAAA,MACzDC,wBADyD,GAC7BL,KAD6B,CACzDK,wBADyD;AAAA,MAElFC,UAFkF,GAEnDL,cAFmD,CAElFK,UAFkF;AAAA,MAEtEC,SAFsE,GAEnDN,cAFmD,CAEtEM,SAFsE;AAAA,MAE3DC,IAF2D,GAEnDP,cAFmD,CAE3DO,IAF2D;AAIzF,MAAIC,gBAAgB,GAAGC,wBAAkBC,aAAzC;AACA,MAAIC,WAAW,GAAG,IAAlB;AACA,MAAIC,eAAe,GAAGN,SAAtB;;AAEA,UAAQD,UAAR;AACE,SAAKQ,sBAAWC,UAAhB;AACEN,MAAAA,gBAAgB,GAAGC,wBAAkBM,MAArC;AACA;;AAEF,SAAKF,sBAAWG,OAAhB;AACE;AACAb,MAAAA,UAAU,CAACG,SAAD,CAAV,GAAwBH,UAAU,CAACG,SAAD,CAAV,IAAyBL,kBAAkB,CAACK,SAAD,EAAYP,KAAZ,CAAnE;AACAY,MAAAA,WAAW,GAAGR,UAAU,CAACG,SAAD,CAAxB;AACAP,MAAAA,KAAK,CAACI,UAAN,GAAmBA,UAAnB;AACAS,MAAAA,eAAe,GAAG,IAAlB;AACA;;AAEF,SAAKC,sBAAWI,gBAAhB;AACEN,MAAAA,WAAW,GAAGP,wBAAd;AACA;;AAEF,SAAKS,sBAAWK,QAAhB;AACA;AAlBF;;AAqBA,MAAIX,IAAJ,EAAU;AACR;AACAK,IAAAA,eAAe,GAAG,IAAIO,WAAJ,CAASZ,IAAT,EAAea,uBAAf,EAAlB;AACD;;AACD,MAAIR,eAAJ,EAAqB;AACnBD,IAAAA,WAAW,GAAGA,WAAW,GACrB,IAAIU,aAAJ,CAAYV,WAAZ,EAAyBW,aAAzB,CAAuCV,eAAvC,CADqB,GAErBA,eAFJ;AAGD;;AAED,SAAO;AACLJ,IAAAA,gBAAgB,EAAhBA,gBADK;AAELe,IAAAA,gBAAgB,EAAErB,MAAM,IAAIL,cAFvB;AAGLc,IAAAA,WAAW,EAAXA;AAHK,GAAP;AAKD;;AAEM,SAASa,gBAAT,cAAwF;AAAA;AAAA,MAA7DC,CAA6D;AAAA,MAA1DC,CAA0D;AAAA,MAAvDC,CAAuD;;AAAA,MAAlDnB,gBAAkD,SAAlDA,gBAAkD;AAAA,MAAhCe,gBAAgC,SAAhCA,gBAAgC;AAAA,MAAdZ,WAAc,SAAdA,WAAc;;AAC7F,MAAIA,WAAJ,EAAiB;AAAA,2BACH,IAAIU,aAAJ,CAAYV,WAAZ,EAAyBiB,eAAzB,CAAyC,CAACH,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU,CAAV,CAAzC,CADG;;AAAA;;AACdF,IAAAA,CADc;AACXC,IAAAA,CADW;AACRC,IAAAA,CADQ;AAEhB;;AAED,UAAQnB,gBAAR;AACE,SAAKC,wBAAkBC,aAAvB;AACE,aAAO,gDAAkBa,gBAAlB,EAAoC,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAApC,CAAP;;AAEF,SAAKlB,wBAAkBM,MAAvB;AACA;AACE,aAAO,CAACU,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AANJ;AAQD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {_Pose as Pose, Matrix4} from 'math.gl';\nimport {addMetersToLngLat} from 'viewport-mercator-project';\n\nimport {COORDINATE} from '../constants';\n\n// keep in sync with core-3d-viewer.js\nconst DEFAULT_ORIGIN = [0, 0, 0];\n\nexport function resolveCoordinateTransform(frame, streamMetadata = {}, getTransformMatrix) {\n  const {origin, transforms = {}, vehicleRelativeTransform} = frame;\n  const {coordinate, transform, pose} = streamMetadata;\n\n  let coordinateSystem = COORDINATE_SYSTEM.METER_OFFSETS;\n  let modelMatrix = null;\n  let streamTransform = transform;\n\n  switch (coordinate) {\n    case COORDINATE.GEOGRAPHIC:\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n      break;\n\n    case COORDINATE.DYNAMIC:\n      // cache calculated transform matrix for each frame\n      transforms[transform] = transforms[transform] || getTransformMatrix(transform, frame);\n      modelMatrix = transforms[transform];\n      frame.transforms = transforms;\n      streamTransform = null;\n      break;\n\n    case COORDINATE.VEHICLE_RELATIVE:\n      modelMatrix = vehicleRelativeTransform;\n      break;\n\n    case COORDINATE.IDENTITY:\n    default:\n  }\n\n  if (pose) {\n    // TODO - remove when builder updates\n    streamTransform = new Pose(pose).getTransformationMatrix();\n  }\n  if (streamTransform) {\n    modelMatrix = modelMatrix\n      ? new Matrix4(modelMatrix).multiplyRight(streamTransform)\n      : streamTransform;\n  }\n\n  return {\n    coordinateSystem,\n    coordinateOrigin: origin || DEFAULT_ORIGIN,\n    modelMatrix\n  };\n}\n\nexport function positionToLngLat([x, y, z], {coordinateSystem, coordinateOrigin, modelMatrix}) {\n  if (modelMatrix) {\n    [x, y, z] = new Matrix4(modelMatrix).transformVector([x, y, z, 1]);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return addMetersToLngLat(coordinateOrigin, [x, y, z]);\n\n    case COORDINATE_SYSTEM.LNGLAT:\n    default:\n      return [x, y, z];\n  }\n}\n"],"file":"transform.js"}