{"version":3,"sources":["../../../../src/components/declarative-ui/xviz-plot.js"],"names":["GET_X","d","GET_Y","DATA_LOADING","isLoading","XVIZPlotComponent","independentVariable","dependentVariables","x","props","onClick","log","streamName","nextProps","variables","setState","independentVariableChanged","dependentVariablesChanged","updatedDependentVariable","state","variable","_formatDependentVariable","length","values","map","id","v","k","data","forEach","i","getX","getY","xDomain","title","description","width","height","style","xTicks","yTicks","formatXTick","formatYTick","horizontalGridLines","verticalGridLines","getColor","dataProps","_extractDataProps","_onClick","_formatTitle","PureComponent","PropTypes","oneOfType","string","number","object","func","arrayOf","metadata","margin","left","right","top","bottom","DEFAULT_COLOR_SERIES","getLogState","frame","getCurrentFrame","getMetadata","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {MetricCard, MetricChart} from '@streetscape.gl/monochrome';\n\nimport {DEFAULT_COLOR_SERIES} from './constants';\nimport connectToLog from '../connect';\n\nconst GET_X = d => d[0];\nconst GET_Y = d => d[1];\nconst DATA_LOADING = {isLoading: true};\n\nclass XVIZPlotComponent extends PureComponent {\n  static propTypes = {\n    // User configuration\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    style: PropTypes.object,\n    getColor: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    xTicks: PropTypes.number,\n    yTicks: PropTypes.number,\n    formatXTick: PropTypes.func,\n    formatYTick: PropTypes.func,\n    horizontalGridLines: PropTypes.number,\n    verticalGridLines: PropTypes.number,\n    onClick: PropTypes.func,\n\n    // From declarative UI plot component\n    title: PropTypes.string,\n    description: PropTypes.string,\n    independentVariable: PropTypes.string,\n    dependentVariables: PropTypes.arrayOf(PropTypes.string),\n\n    // From connected log\n    metadata: PropTypes.object,\n    variables: PropTypes.object\n  };\n\n  static defaultProps = {\n    metadata: {},\n    variables: {},\n    width: '100%',\n    height: 300,\n    style: {\n      margin: {left: 45, right: 10, top: 10, bottom: 32}\n    },\n    xTicks: 0,\n    yTicks: 5,\n    horizontalGridLines: 5,\n    verticalGridLines: 0,\n    getColor: DEFAULT_COLOR_SERIES\n  };\n\n  state = {\n    independentVariable: null,\n    dependentVariables: {}\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.variables) {\n      this.setState({independentVariable: null});\n      return;\n    }\n\n    const independentVariable = nextProps.variables[nextProps.independentVariable];\n    let independentVariableChanged = false;\n    let dependentVariablesChanged = false;\n    const updatedDependentVariable = {};\n\n    if (independentVariable !== this.state.independentVariable) {\n      independentVariableChanged = true;\n    }\n    for (const streamName of nextProps.dependentVariables) {\n      const variable = nextProps.variables[streamName];\n      if (\n        independentVariableChanged ||\n        !this.props.variables ||\n        this.props.variables[streamName] !== variable\n      ) {\n        updatedDependentVariable[streamName] = this._formatDependentVariable(\n          independentVariable,\n          variable\n        );\n        dependentVariablesChanged = true;\n      }\n    }\n\n    if (independentVariableChanged || dependentVariablesChanged) {\n      this.setState({\n        independentVariable,\n        dependentVariables: {...this.state.dependentVariables, ...updatedDependentVariable}\n      });\n    }\n  }\n\n  _onClick = x => {\n    const {onClick, log} = this.props;\n    if (onClick) {\n      onClick(x);\n    } else if (log) {\n      // TODO - set look ahead\n    }\n  };\n\n  _formatTitle = streamName => {\n    // TODO - use information from metadata\n    // const {metadata} = this.props;\n    // const streamInfo = metadata && metadata.streams[streamName];\n    return streamName;\n  };\n\n  _formatDependentVariable(independentVariable, variable) {\n    if (!variable || !independentVariable || independentVariable.length === 0) {\n      return null;\n    }\n    const x = independentVariable[0].values;\n\n    return variable.map(({id, values}) => {\n      return {\n        id,\n        values: values.map((v, k) => [x[k], v])\n      };\n    });\n  }\n\n  _extractDataProps() {\n    const {independentVariable, dependentVariables} = this.state;\n\n    if (!independentVariable) {\n      return DATA_LOADING;\n    }\n\n    const x = independentVariable[0].values;\n    const data = {};\n    for (const streamName in dependentVariables) {\n      const variable = dependentVariables[streamName];\n      if (variable) {\n        variable.forEach(({id, values}, i) => {\n          data[`${streamName}-${id || i}`] = values;\n        });\n      }\n    }\n\n    return {\n      getX: GET_X,\n      getY: GET_Y,\n      xDomain: [x[0], x[x.length - 1]],\n      data\n    };\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      width,\n      height,\n      style,\n      xTicks,\n      yTicks,\n      formatXTick,\n      formatYTick,\n      horizontalGridLines,\n      verticalGridLines,\n      getColor\n    } = this.props;\n\n    const dataProps = this._extractDataProps();\n\n    return (\n      <MetricCard\n        title={title}\n        description={description}\n        style={style}\n        isLoading={dataProps.isLoading}\n      >\n        <MetricChart\n          {...dataProps}\n          getColor={getColor}\n          highlightX={0}\n          width={width}\n          height={height}\n          style={style}\n          xTicks={xTicks}\n          yTicks={yTicks}\n          formatXTick={formatXTick}\n          formatYTick={formatYTick}\n          onClick={this._onClick}\n          formatTitle={this._formatTitle}\n          horizontalGridLines={horizontalGridLines}\n          verticalGridLines={verticalGridLines}\n        />\n      </MetricCard>\n    );\n  }\n}\n\nconst getLogState = log => {\n  const frame = log.getCurrentFrame();\n  return {\n    metadata: log.getMetadata(),\n    variables: frame && frame.variables\n  };\n};\n\nexport default connectToLog({getLogState, Component: XVIZPlotComponent});\n"],"file":"xviz-plot.js"}