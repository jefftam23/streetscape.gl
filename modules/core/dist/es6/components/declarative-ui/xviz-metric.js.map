{"version":3,"sources":["../../../../src/components/declarative-ui/xviz-metric.js"],"names":["React","PureComponent","PropTypes","MetricCard","MetricChart","DEFAULT_COLOR_SERIES","connectToLog","getTimeSeries","defaultFormatValue","x","Number","isFinite","toFixed","String","XVIZMetricComponent","constructor","props","onClick","log","seek","state","timeSeries","_getTimeSeries","componentWillReceiveProps","nextProps","streams","metadata","logStreams","setState","streamNames","render","title","description","startTime","endTime","currentTime","width","height","style","xTicks","yTicks","formatXTick","formatYTick","formatValue","horizontalGridLines","verticalGridLines","getColor","isLoading","timeDomain","_onClick","object","oneOfType","string","number","func","arrayOf","isRequired","objectOf","array","margin","left","right","top","bottom","getLogState","getCurrentTime","getMetadata","getStreams","getBufferStartTime","getBufferEndTime","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {MetricCard, MetricChart} from '@streetscape.gl/monochrome';\n\nimport {DEFAULT_COLOR_SERIES} from './constants';\nimport connectToLog from '../connect';\nimport {getTimeSeries} from '../../utils/metrics-helper';\n\nconst defaultFormatValue = x => (Number.isFinite(x) ? x.toFixed(3) : String(x));\n\nclass XVIZMetricComponent extends PureComponent {\n  static propTypes = {\n    // User configuration\n    style: PropTypes.object,\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    getColor: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\n    xTicks: PropTypes.number,\n    yTicks: PropTypes.number,\n    formatXTick: PropTypes.func,\n    formatYTick: PropTypes.func,\n    formatValue: PropTypes.func,\n    horizontalGridLines: PropTypes.number,\n    verticalGridLines: PropTypes.number,\n    onClick: PropTypes.func,\n\n    // From declarative UI metric component\n    streams: PropTypes.arrayOf(PropTypes.string).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n\n    // From connected log\n    currentTime: PropTypes.number,\n    metadata: PropTypes.object,\n    logStreams: PropTypes.objectOf(PropTypes.array),\n    startTime: PropTypes.number,\n    endTime: PropTypes.number\n  };\n\n  static defaultProps = {\n    timeSeries: {},\n    width: '100%',\n    height: 160,\n    style: {\n      margin: {left: 45, right: 10, top: 10, bottom: 20}\n    },\n    xTicks: 0,\n    yTicks: 3,\n    formatValue: defaultFormatValue,\n    horizontalGridLines: 3,\n    verticalGridLines: 0,\n    getColor: DEFAULT_COLOR_SERIES\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeSeries: this._getTimeSeries(props)\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      this.props.streams !== nextProps.streams ||\n      this.props.metadata !== nextProps.metadata ||\n      this.props.logStreams !== nextProps.logStreams\n    ) {\n      this.setState({\n        timeSeries: this._getTimeSeries(nextProps)\n      });\n    }\n  }\n\n  _getTimeSeries(props) {\n    return getTimeSeries({\n      streamNames: props.streams,\n      metadata: props.metadata,\n      streams: props.logStreams\n    });\n  }\n\n  _onClick = x => {\n    const {onClick, log} = this.props;\n    if (onClick) {\n      onClick(x);\n    } else if (log) {\n      log.seek(x);\n    }\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      startTime,\n      endTime,\n      currentTime,\n      width,\n      height,\n      style,\n      xTicks,\n      yTicks,\n      formatXTick,\n      formatYTick,\n      formatValue,\n      horizontalGridLines,\n      verticalGridLines,\n      getColor\n    } = this.props;\n    const isLoading = currentTime === null;\n    const timeDomain = Number.isFinite(startTime) ? [startTime, endTime] : null;\n\n    return (\n      <MetricCard title={title} description={description} isLoading={isLoading} style={style}>\n        {!isLoading && (\n          <MetricChart\n            {...this.state.timeSeries}\n            getColor={getColor}\n            highlightX={currentTime}\n            width={width}\n            height={height}\n            style={style}\n            xTicks={xTicks}\n            yTicks={yTicks}\n            formatXTick={formatXTick}\n            formatYTick={formatYTick}\n            formatValue={formatValue}\n            xDomain={timeDomain}\n            onClick={this._onClick}\n            horizontalGridLines={horizontalGridLines}\n            verticalGridLines={verticalGridLines}\n          />\n        )}\n      </MetricCard>\n    );\n  }\n}\n\nconst getLogState = log => ({\n  currentTime: log.getCurrentTime(),\n  metadata: log.getMetadata(),\n  logStreams: log.getStreams(),\n  startTime: log.getBufferStartTime(),\n  endTime: log.getBufferEndTime()\n});\n\nexport default connectToLog({getLogState, Component: XVIZMetricComponent});\n"],"file":"xviz-metric.js"}