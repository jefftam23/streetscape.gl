{"version":3,"sources":["../../../../src/components/declarative-ui/xviz-plot.js"],"names":["React","PureComponent","PropTypes","MetricCard","MetricChart","DEFAULT_COLOR_SERIES","connectToLog","GET_X","d","GET_Y","DATA_LOADING","isLoading","XVIZPlotComponent","independentVariable","dependentVariables","x","props","onClick","log","streamName","componentWillReceiveProps","nextProps","variables","setState","independentVariableChanged","dependentVariablesChanged","updatedDependentVariable","state","variable","_formatDependentVariable","length","values","map","id","v","k","_extractDataProps","data","forEach","i","getX","getY","xDomain","render","title","description","width","height","style","xTicks","yTicks","formatXTick","formatYTick","horizontalGridLines","verticalGridLines","getColor","dataProps","_onClick","_formatTitle","oneOfType","string","number","object","func","arrayOf","metadata","margin","left","right","top","bottom","getLogState","frame","getCurrentFrame","getMetadata","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {MetricCard, MetricChart} from '@streetscape.gl/monochrome';\n\nimport {DEFAULT_COLOR_SERIES} from './constants';\nimport connectToLog from '../connect';\n\nconst GET_X = d => d[0];\nconst GET_Y = d => d[1];\nconst DATA_LOADING = {isLoading: true};\n\nclass XVIZPlotComponent extends PureComponent {\n  static propTypes = {\n    // User configuration\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    style: PropTypes.object,\n    getColor: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    xTicks: PropTypes.number,\n    yTicks: PropTypes.number,\n    formatXTick: PropTypes.func,\n    formatYTick: PropTypes.func,\n    horizontalGridLines: PropTypes.number,\n    verticalGridLines: PropTypes.number,\n    onClick: PropTypes.func,\n\n    // From declarative UI plot component\n    title: PropTypes.string,\n    description: PropTypes.string,\n    independentVariable: PropTypes.string,\n    dependentVariables: PropTypes.arrayOf(PropTypes.string),\n\n    // From connected log\n    metadata: PropTypes.object,\n    variables: PropTypes.object\n  };\n\n  static defaultProps = {\n    metadata: {},\n    variables: {},\n    width: '100%',\n    height: 300,\n    style: {\n      margin: {left: 45, right: 10, top: 10, bottom: 32}\n    },\n    xTicks: 0,\n    yTicks: 5,\n    horizontalGridLines: 5,\n    verticalGridLines: 0,\n    getColor: DEFAULT_COLOR_SERIES\n  };\n\n  state = {\n    independentVariable: null,\n    dependentVariables: {}\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.variables) {\n      this.setState({independentVariable: null});\n      return;\n    }\n\n    const independentVariable = nextProps.variables[nextProps.independentVariable];\n    let independentVariableChanged = false;\n    let dependentVariablesChanged = false;\n    const updatedDependentVariable = {};\n\n    if (independentVariable !== this.state.independentVariable) {\n      independentVariableChanged = true;\n    }\n    for (const streamName of nextProps.dependentVariables) {\n      const variable = nextProps.variables[streamName];\n      if (\n        independentVariableChanged ||\n        !this.props.variables ||\n        this.props.variables[streamName] !== variable\n      ) {\n        updatedDependentVariable[streamName] = this._formatDependentVariable(\n          independentVariable,\n          variable\n        );\n        dependentVariablesChanged = true;\n      }\n    }\n\n    if (independentVariableChanged || dependentVariablesChanged) {\n      this.setState({\n        independentVariable,\n        dependentVariables: {...this.state.dependentVariables, ...updatedDependentVariable}\n      });\n    }\n  }\n\n  _onClick = x => {\n    const {onClick, log} = this.props;\n    if (onClick) {\n      onClick(x);\n    } else if (log) {\n      // TODO - set look ahead\n    }\n  };\n\n  _formatTitle = streamName => {\n    // TODO - use information from metadata\n    // const {metadata} = this.props;\n    // const streamInfo = metadata && metadata.streams[streamName];\n    return streamName;\n  };\n\n  _formatDependentVariable(independentVariable, variable) {\n    if (!variable || !independentVariable || independentVariable.length === 0) {\n      return null;\n    }\n    const x = independentVariable[0].values;\n\n    return variable.map(({id, values}) => {\n      return {\n        id,\n        values: values.map((v, k) => [x[k], v])\n      };\n    });\n  }\n\n  _extractDataProps() {\n    const {independentVariable, dependentVariables} = this.state;\n\n    if (!independentVariable) {\n      return DATA_LOADING;\n    }\n\n    const x = independentVariable[0].values;\n    const data = {};\n    for (const streamName in dependentVariables) {\n      const variable = dependentVariables[streamName];\n      if (variable) {\n        variable.forEach(({id, values}, i) => {\n          data[`${streamName}-${id || i}`] = values;\n        });\n      }\n    }\n\n    return {\n      getX: GET_X,\n      getY: GET_Y,\n      xDomain: [x[0], x[x.length - 1]],\n      data\n    };\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      width,\n      height,\n      style,\n      xTicks,\n      yTicks,\n      formatXTick,\n      formatYTick,\n      horizontalGridLines,\n      verticalGridLines,\n      getColor\n    } = this.props;\n\n    const dataProps = this._extractDataProps();\n\n    return (\n      <MetricCard\n        title={title}\n        description={description}\n        style={style}\n        isLoading={dataProps.isLoading}\n      >\n        <MetricChart\n          {...dataProps}\n          getColor={getColor}\n          highlightX={0}\n          width={width}\n          height={height}\n          style={style}\n          xTicks={xTicks}\n          yTicks={yTicks}\n          formatXTick={formatXTick}\n          formatYTick={formatYTick}\n          onClick={this._onClick}\n          formatTitle={this._formatTitle}\n          horizontalGridLines={horizontalGridLines}\n          verticalGridLines={verticalGridLines}\n        />\n      </MetricCard>\n    );\n  }\n}\n\nconst getLogState = log => {\n  const frame = log.getCurrentFrame();\n  return {\n    metadata: log.getMetadata(),\n    variables: frame && frame.variables\n  };\n};\n\nexport default connectToLog({getLogState, Component: XVIZPlotComponent});\n"],"file":"xviz-plot.js"}