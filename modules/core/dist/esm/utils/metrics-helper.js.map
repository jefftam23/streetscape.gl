{"version":3,"sources":["../../../src/utils/metrics-helper.js"],"names":["getX","d","time","variableNullFilter","value","undefined","getTimeSeriesForStream","streamName","metadata","stream","target","nograph","mapper","valueMap","scale","getY","variable","sampleDatum","find","Number","isFinite","isLoading","unit","data","filter","getTimeSeries","streamNames","streams","timeSeries","streamMetadata"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAAAC,CAAC;AAAA,SAAIA,CAAC,CAACC,IAAN;AAAA,CAAd;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK;AAAA,SAAIA,KAAK,KAAKC,SAAd;AAAA,CAAhC;;AAEA,SAASC,sBAAT,CAAgCC,UAAhC,EAA4CC,QAA5C,EAAsDC,MAAtD,EAA8DC,MAA9D,EAAsE;AACpE,MAAIF,QAAQ,CAACG,OAAb,EAAsB;AACpB;AACD;;AAED,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,QAAxB;AACA,MAAMC,KAAK,GAAGN,QAAQ,CAACM,KAAT,IAAkB,CAAhC;AACA,MAAMC,IAAI,GAAGH,MAAM,GAAG,UAAAX,CAAC;AAAA,WAAIW,MAAM,CAACX,CAAC,CAACe,QAAH,CAAV;AAAA,GAAJ,GAA6B,UAAAf,CAAC;AAAA,WAAIA,CAAC,CAACe,QAAF,GAAaF,KAAjB;AAAA,GAAjD;AAEA,MAAMG,WAAW,GAAGR,MAAM,CAACS,IAAP,CAAYf,kBAAZ,CAApB;;AACA,MAAI,CAACc,WAAD,IAAgB,CAACE,MAAM,CAACC,QAAP,CAAgBL,IAAI,CAACE,WAAD,CAApB,CAArB,EAAyD;AACvD;AACD;;AAEDP,EAAAA,MAAM,CAACW,SAAP,GAAmB,KAAnB;AACAX,EAAAA,MAAM,CAACV,IAAP,GAAcA,IAAd;AACAU,EAAAA,MAAM,CAACK,IAAP,GAAcA,IAAd;AACAL,EAAAA,MAAM,CAACY,IAAP,GAAcd,QAAQ,CAACc,IAAT,IAAiB,EAA/B;AACAZ,EAAAA,MAAM,CAACa,IAAP,CAAYhB,UAAZ,IAA0BE,MAAM,CAACe,MAAP,CAAcrB,kBAAd,CAA1B;AACD;AAED;;;;;;;;AAMA,OAAO,SAASsB,aAAT,OAA8D;AAAA,2BAAtCjB,QAAsC;AAAA,MAAtCA,QAAsC,8BAA3B,EAA2B;AAAA,MAAvBkB,WAAuB,QAAvBA,WAAuB;AAAA,MAAVC,OAAU,QAAVA,OAAU;AACnE,MAAMC,UAAU,GAAG;AACjBP,IAAAA,SAAS,EAAE,IADM;AAEjBE,IAAAA,IAAI,EAAE;AAFW,GAAnB;AADmE;AAAA;AAAA;;AAAA;AAKnE,yBAAyBG,WAAzB,8HAAsC;AAAA,UAA3BnB,UAA2B;AACpC;AACA,UAAMsB,cAAc,GAAIrB,QAAQ,CAACmB,OAAT,IAAoBnB,QAAQ,CAACmB,OAAT,CAAiBpB,UAAjB,CAArB,IAAsD,EAA7E;AACA,UAAME,MAAM,GAAGkB,OAAO,CAACpB,UAAD,CAAtB;;AACA,UAAIE,MAAJ,EAAY;AACVH,QAAAA,sBAAsB,CAACC,UAAD,EAAasB,cAAb,EAA6BpB,MAA7B,EAAqCmB,UAArC,CAAtB;AACD;AACF;AAZkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcnE,SAAOA,UAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nconst getX = d => d.time;\nconst variableNullFilter = value => value !== undefined;\n\nfunction getTimeSeriesForStream(streamName, metadata, stream, target) {\n  if (metadata.nograph) {\n    return;\n  }\n\n  const mapper = metadata.valueMap;\n  const scale = metadata.scale || 1;\n  const getY = mapper ? d => mapper[d.variable] : d => d.variable * scale;\n\n  const sampleDatum = stream.find(variableNullFilter);\n  if (!sampleDatum || !Number.isFinite(getY(sampleDatum))) {\n    return;\n  }\n\n  target.isLoading = false;\n  target.getX = getX;\n  target.getY = getY;\n  target.unit = metadata.unit || '';\n  target.data[streamName] = stream.filter(variableNullFilter);\n}\n\n/**\n * Get the time series for given streams\n * @param logMetadata {object} log metadata\n * @param streams array of streams data\n * @returns {Array} array of time series data\n */\nexport function getTimeSeries({metadata = {}, streamNames, streams}) {\n  const timeSeries = {\n    isLoading: true,\n    data: {}\n  };\n  for (const streamName of streamNames) {\n    // ui configuration for this stream\n    const streamMetadata = (metadata.streams && metadata.streams[streamName]) || {};\n    const stream = streams[streamName];\n    if (stream) {\n      getTimeSeriesForStream(streamName, streamMetadata, stream, timeSeries);\n    }\n  }\n\n  return timeSeries;\n}\n"],"file":"metrics-helper.js"}